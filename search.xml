<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2021/04/17/article-title/</url>
    <content><![CDATA[<h1 id="自己动手写区块链（一）"><a href="#自己动手写区块链（一）" class="headerlink" title="自己动手写区块链（一）"></a>自己动手写区块链（一）</h1><p>&emsp;&emsp;最近误打误撞误入币圈,血雨腥风，不忍直视。T_T（这篇文章本来早就写好的，结果中间耽搁了一段时间，没想到今天狗狗币也太夸张了一天200%0.0）</p>
<p>&emsp;&emsp;但身为一名富有实践性好奇心的程序员决定搜搜资料，自己创造一个属于自己的区块链。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>&emsp;&emsp;开始之前自然先要熟悉一下到底什么是区块链了。简单的说，区块链就是一种去中心化的数据库。总之巴拉巴拉的，反正是数据顺序连接就完事了。</p>
<p>&emsp;&emsp;根据网上各位大佬的推荐，本次实践所用到的源代码模板是blockchain：<a href="https://link.zhihu.com/?target=https://github.com/dvf/blockchain%E3%80%82%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%BD%93%E7%84%B6%E6%98%AFPython%E5%A4%A7%E6%B3%95%E4%BA%86%EF%BC%9APython3%E3%80%81hashlib%E3%80%81json%E3%80%81flask%EF%BC%88%E7%94%B1python%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%B8%80%E4%B8%AAweb%E5%BE%AE%E6%A1%86%E6%9E%B6%EF%BC%89%E3%80%81request%E7%AD%89%E3%80%82">https://link.zhihu.com/?target=https%3A//github.com/dvf/blockchain。开发环境当然是Python大法了：Python3、hashlib、json、flask（由python实现的一个web微框架）、request等。</a></p>
<p>##实践<br>1.建立一个区块链<br>&emsp;&emsp;话不多说直接上代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span>  json</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blockcain</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.chain = []</span><br><span class="line">        self.current_transactions = []</span><br><span class="line">        self.new_block(previous_hash=<span class="number">1</span> , proof = <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">new_block</span>(<span class="params">self , proof , previous_hass = <span class="literal">None</span></span>):</span></span><br><span class="line">        block = &#123;</span><br><span class="line">            <span class="string">&#x27;index&#x27;</span> : <span class="built_in">len</span>(self.chain) + <span class="number">1</span>,</span><br><span class="line">            <span class="string">&#x27;timestamp&#x27;</span> : time(),</span><br><span class="line">            <span class="string">&#x27;transactions&#x27;</span> : self.current_transactions,</span><br><span class="line">            <span class="string">&#x27;proof&#x27;</span> : proof,</span><br><span class="line">            <span class="string">&#x27;previous_hash&#x27;</span> : previous_hass <span class="keyword">or</span> self.<span class="built_in">hash</span>(self.chain[-<span class="number">1</span>]),</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        self.current_transactions = []</span><br><span class="line">        self.chain.append(block)</span><br><span class="line">        <span class="keyword">return</span> block</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">new_transaction</span>(<span class="params">self , sender , recipient , amount</span>):</span></span><br><span class="line">        self.current_transactions.append(&#123;</span><br><span class="line">            <span class="string">&#x27;sender&#x27;</span> : sender,</span><br><span class="line">            <span class="string">&#x27;recipient&#x27;</span> : recipient,</span><br><span class="line">            <span class="string">&#x27;amount&#x27;</span> : amount,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.last_block[<span class="string">&#x27;index&#x27;</span>] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">last_block</span>(<span class="params">self </span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.chain[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hash</span>(<span class="params">block</span>):</span></span><br><span class="line">        block_string = json.dump(block , sort_keys=<span class="literal">True</span>).encode()</span><br><span class="line">        <span class="keyword">return</span> hashlib.sha256(block_string).hexdigest()</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;首先是定义一个Blockcain的类，定义之前我们先搞清楚，一个区块到底由那几部分结构构成，首先是index区块的索引、timestamp时间戳，这两个基本要素，其次就是与交易有关的信息了，包括：</p>
<ul>
<li>transactions交易列表：列表如同平时购物的小票一样，包含了买卖双方以及买卖金额sender、recipient、amount这三个属性构成。</li>
<li>proof工作量证明：在比特币中，工作证明算法被称为Hashcash，结果难于发现却易于校验。就是每个区块需要计算的内容的证明，如同密码学中分解两个大素数的积一样，不好分解但知道结果后好证明。</li>
<li>previous_hash：前一个区块的哈希值，通过这个值，每个新的区块都会包含上一个区块的哈希值，从而让区块链具有不可篡改的特性。</li>
</ul>
<p>明白了这些之后我们便可以实现区块结构：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_block</span>(<span class="params">self , proof , previous_hass = <span class="literal">None</span></span>):</span></span><br><span class="line">    block = &#123;</span><br><span class="line">        <span class="string">&#x27;index&#x27;</span> : <span class="built_in">len</span>(self.chain) + <span class="number">1</span>,</span><br><span class="line">        <span class="string">&#x27;timestamp&#x27;</span> : time(),</span><br><span class="line">        <span class="string">&#x27;transactions&#x27;</span> : self.current_transactions,</span><br><span class="line">        <span class="string">&#x27;proof&#x27;</span> : proof,</span><br><span class="line">        <span class="string">&#x27;previous_hash&#x27;</span> : previous_hass <span class="keyword">or</span> self.<span class="built_in">hash</span>(self.chain[-<span class="number">1</span>]),</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>以及交易列表结构：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_transaction</span>(<span class="params">self , sender , recipient , amount</span>):</span></span><br><span class="line">    self.current_transactions.append(&#123;</span><br><span class="line">        <span class="string">&#x27;sender&#x27;</span> : sender,</span><br><span class="line">        <span class="string">&#x27;recipient&#x27;</span> : recipient,</span><br><span class="line">        <span class="string">&#x27;amount&#x27;</span> : amount,</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
<p>有了这两个结构，区块链的基本雏形已经实现了，关于建立了区块链后如何进行“挖矿”下一节继续梭哈。</p>
<p>&emsp;&emsp;友情提示：币圈有风险入圈需谨慎0.0</p>
<p><em>ps:祭奠第248天，愿249天之后都是幸福。5LmW5LmW5oiR54ix5L2g5LiN56a75LiN5byD</em></p>
]]></content>
  </entry>
</search>
